You can use PowerShell to convert a CIDR notation into an IP range and store the output in a single variable. Hereâ€™s a script that does just that, outputting the range in a format like "192.168.1.1 - 192.168.1.254":

```powershell
function Get-IPRangeFromCIDR {
    param (
        [string]$CIDR
    )
    
    # Get the IP address and the subnet mask
    $ip, $mask = $CIDR -split '/'
    $ipBytes = [System.Net.IPAddress]::Parse($ip).GetAddressBytes()
    $maskBits = [int]$mask
    $netMask = ([uint32]::MaxValue -shl (32 - $maskBits)) -band [uint32]::MaxValue

    # Calculate network address and broadcast address
    $network = [BitConverter]::GetBytes(([BitConverter]::ToUInt32($ipBytes, 0) -band $netMask))
    $broadcast = [BitConverter]::GetBytes(([BitConverter]::ToUInt32($ipBytes, 0) -bor (-bnot $netMask)))

    # Convert back to IP format
    $networkIP = [System.Net.IPAddress]::new($network)
    $broadcastIP = [System.Net.IPAddress]::new($broadcast)

    # Prepare output
    $ipRange = "$networkIP - $broadcastIP"
    return $ipRange
}

# Example usage
$ipRange = Get-IPRangeFromCIDR -CIDR "192.168.1.0/24"
Write-Output $ipRange
```

### Explanation:
1. **Function**: The `Get-IPRangeFromCIDR` function takes a CIDR notation as input.
2. **Parsing**: It splits the input into the IP address and the subnet mask.
3. **Calculating Network & Broadcast**: It calculates the network and broadcast address for the given IP range.
4. **Output**: The range is returned in the format "startIP - endIP".

### Result in a Variable:
You can run the function and store the result in a single variable `$ipRange`, which will contain the output like "192.168.1.0 - 192.168.1.255".
