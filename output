# Backend Pools from IPs
dynamic "backend_address_pool" {
  for_each = try(each.value.backend_pools_ip, {})
  content {
    name         = key
    ip_addresses = value
  }
}

# Backend Pools from FQDNs
dynamic "backend_address_pool" {
  for_each = try(each.value.backend_pools_fqdn, {})
  content {
    name  = key
    fqdns = value
  }
}

# Backend Pools from VMs
dynamic "backend_address_pool" {
  for_each = try(each.value.backend_pools_vm, {})
  content {
    name         = key
    ip_addresses = [for vm in value : data.azurerm_network_interface.vm_nics["${each.key}_${vm}"].private_ip_address]
  }
}

# Backend Pools from App Services
dynamic "backend_address_pool" {
  for_each = try(each.value.backend_pools_appservice, {})
  content {
    name  = key
    fqdns = [for app in value : data.azurerm_app_service.app_services["${each.key}_${app}"].default_site_hostname]
  }
}





data "azurerm_network_interface" "vm_nics" {
  for_each = {
    for gw_key, gw in var.AppGateway :
    for vm_pool_key, vm_names in gw.backend_pools_vm :
    for vm in vm_names :
    "${gw_key}_${vm}" => {
      name                = gw.backend_vm_nic
      resource_group_name = gw.backend_vm_rg
    }
  }

  name                = each.value.name
  resource_group_name = each.value.resource_group_name
}

data "azurerm_app_service" "app_services" {
  for_each = {
    for gw_key, gw in var.AppGateway :
    for app_pool_key, app_names in gw.backend_pools_appservice :
    for app in app_names :
    "${gw_key}_${app}" => {
      name                = app
      resource_group_name = element(split(",", gw.backend_app_service_rg), 0) # or refine this logic if RGs differ
    }
  }

  name                = each.value.name
  resource_group_name = each.value.resource_group_name
}





variable "AppGateway" {
  type = map(object({
    # ... existing fields ...
    backend_pools_ip         = map(list(string))
    backend_pools_fqdn       = map(list(string))
    backend_pools_vm         = map(list(string))
    backend_pools_appservice = map(list(string))
  }))
}
