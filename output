provider "azurerm" {
  features {}
}

variable "resource_group_name" {
  type        = string
  description = "Resource group name"
}

variable "location" {
  type        = string
  description = "Azure region"
}

variable "rg_tags" {
  type = map(string)
}

variable "FunctionApp" {
  type = map(object({
    Hosting_plan                = string
    Pricing_Plan                = string
    AZ_Region                   = string
    Function_App_Plan_Name      = string
    Resource_Description        = string
    Operating_System            = string
    Web_App_Name                = string
    Publish                    = string
    Runtime_Stack               = string
    Runtime_Stack_verison       = string
    tomcatVersion              = string
    Linux_Plan                 = string
    Windows_Plan               = string
    Zone_redundancy            = string
    Enable_Application_Insights = string
    vnetname                   = string
    vnet_rg                    = string
    Storage_Account_Name       = string
    Diagnostic_Settings         = string
    Workspace                   = string
    Enable_public_access       = string
    Enable_network_injection    = string
    Enable_private_endpoints    = string
    Inbound_subnet             = string
    Enable_Vnet_Integration     = string
    Outbound_subnet            = string
    Basic_Authentication        = string
  }))
}

resource "azurerm_resource_group" "rg" {
  name     = var.resource_group_name
  location = var.location
  tags     = var.rg_tags
}

resource "azurerm_storage_account" "function_storage" {
  for_each = var.FunctionApp

  name                     = lower(replace(each.value.Storage_Account_Name, " ", ""))

  resource_group_name      = azurerm_resource_group.rg.name
  location                 = var.location
  account_tier             = "Standard"
  account_replication_type = "LRS"

  tags = {
    "Resource_Description" = each.value.Resource_Description
  }
}

resource "azurerm_app_service_plan" "function_app_plan" {
  for_each = var.FunctionApp

  name                = each.value.Function_App_Plan_Name
  location            = var.location
  resource_group_name = azurerm_resource_group.rg.name
  sku {
    tier     = each.value.Hosting_plan == "Consumption" ? "Dynamic" : "PremiumV2"
    size     = "P1v2"
    capacity = 1
  }

  tags = {
    "Resource_Description" = each.value.Resource_Description
  }
}

resource "azurerm_function_app" "function_app" {
  for_each = var.FunctionApp

  name                       = each.value.Web_App_Name
  location                   = var.location
  resource_group_name        = azurerm_resource_group.rg.name
  app_service_plan_id        = azurerm_app_service_plan.function_app_plan[each.key].id
  storage_account_name       = azurerm_storage_account.function_storage[each.key].name
  storage_account_access_key = azurerm_storage_account.function_storage[each.key].primary_access_key

  os_type = true
  os_type = contains(["Linux","linux"], lower(each.value.Operating_System)) ? "Linux" : "Windows"

  version = "~3"

  https_only = true

  identity {
    type = "SystemAssigned"
  }

  app_settings = {
    FUNCTIONS_WORKER_RUNTIME             = lower(each.value.Runtime_Stack)
    WEBSITE_RUN_FROM_PACKAGE             = "1"
    ENABLE_APPLICATION_INSIGHTS          = each.value.Enable_Application_Insights == "Yes" ? "true" : "false"
    APPLICATIONINSIGHTS_CONNECTION_STRING = each.value.Enable_Application_Insights == "Yes" ? "<Your_Instrumentation_Key>" : ""
    # Add more dynamic app settings below if needed
  }

  site_config {
    linux_fx_version = each.value.Operating_System == "Linux" ? "${each.value.Runtime_Stack}|${each.value.Runtime_Stack_verison}" : null
    # For Windows, runtime stack configs could differ and be added accordingly
  }

  tags = {
    "Resource_Description" = each.value.Resource_Description
  }
}




  dynamic "site_config" {
    for_each = each.value.Operating_System == "Linux" ? [1] : []

    content {
      linux_fx_version = "${each.value.Runtime_Stack}|${each.value.Runtime_Stack_verison}"
      # Add any other Linux-specific site_config settings here
    }
  }

  dynamic "site_config" {
    for_each = each.value.Operating_System == "Windows" ? [1] : []

    content {
      # For Windows, set windows_fx_version if needed or other settings
      # For example, if you want to set java version or other runtime:
      # windows_fx_version = "Java|11"  # adjust as per your input
      # or leave empty or set other Windows site_config attributes
    }
  }
